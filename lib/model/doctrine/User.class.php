<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class User extends BaseUser
{
	const TYPE_SIMPLE = 'SIMPLE';
	const TYPE_PARTNER = 'PARTNER';
	const TYPE_MASTER = 'MASTER';
	
    public function isMaster() {
        $type = $this->getType();
        return ($type == self::TYPE_MASTER);
    }
    public function isSimple() {
        $type = $this->getType();
        return ($type == self::TYPE_SIMPLE);
    }
    
    public function isPartner() {
        $type = $this->getType();
        return ($type == self::TYPE_PARTNER);
    }
    
    /**
     * 
     * @return Doctrine_Collection Partner
     */
    public function getPartner(){
    	$partner = null;
    	
    	if ($this->isPartner() || $this->isMaster()) $partner = Doctrine_Query::create()
  			->from('Partner p')
  			->innerJoin('p.PartnerUser pu')
			->where('pu.user_id = ?', $this->getId())
			->fetchOne();
    		
    	return $partner;
    }
    
    /**
     * @return Doctrine_Collection Cal
     */
    public function getCals(){
    	$cals = Doctrine_Query::create()
    	->from('Cal c')
    	->where('c.by_user_id = ?', $this->getId());
    	
    	if (!$this->isMaster()) $cals->andWhere('c.deleted_at IS NULL');
    	
    	$cals->orderBy('c.updated_at DESC');
    	
    	return $cals->execute();
    }
    
    public function createPartner($rootName="ROOT", $website=null){
    	$partner = $this->getPartner();
    	if (!$partner){
    		//Create Partner
    		$partner = new Partner();
    		$partner->setName($rootName);
    		$partner->setHash($this->getId()); //TODO: replace with nice hash
    	
    		//TODO: add timezone ?
    		$partner->Save();
    	
    		//Create PartnerUser
    		$partnerUser = new PartnerUser();
    		$partnerUser->setPartnerId($partner->getId());
    		$partnerUser->setUserId($this->getId());
    		$partnerUser->save();
    		
    		//$partner->setPartnerUser($partnerUser);
    	
    		if ($this->isSimple()){
    			$this->setType(User::TYPE_PARTNER);
    			$this->save();
    		}
    	}
    	 
    	$category = $partner->getRootCategory();
    	if (!$category){
    		//Create Category
    		$category = new Category();
    		$category->setName($rootName);
    		$category->setIsPublic(false);
    		$category->setPartnerId($partner->getId());
    		$category->setByUserId($this->getId());
    		$category->setParentId(Category::CTG_NEVER_MISS);
    		$category->save();
    		 
    		$category->setCategoryIdsPath(Category::CTG_NEVER_MISS . ',' . $category->getId());
    		$category->save();
    	
    		//Create PartnerDesc
    		$partnerDesc = new PartnerDesc();
    		$partnerDesc->setPartnerId($partner->getId());
    		$partnerDesc->setWebsite($website);
    		$partnerDesc->setCategory($category);
    		//$partnerDesc->setCategoryId($category->getId());
    		//$partnerDesc->setCalId($this->getId());
    		$partnerDesc->save();
    		
    		//$partner->setPartnerDesc($partnerDesc);
    	}
    	
    	return $partner;
    }
}