<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $cal_id
 * @property string $name
 * @property string $description
 * @property string $image_path
 * @property string $location
 * @property string $tz
 * @property string $tags
 * @property timestamp $starts_at
 * @property timestamp $ends_at
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $address_id
 * @property Address $Address
 * @property Cal $Cal
 * @property Doctrine_Collection $EventStat
 * @property Doctrine_Collection $Intel
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $ShortUrl
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method integer             getCalId()       Returns the current record's "cal_id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getDescription() Returns the current record's "description" value
 * @method string              getImagePath()   Returns the current record's "image_path" value
 * @method string              getLocation()    Returns the current record's "location" value
 * @method string              getTz()          Returns the current record's "tz" value
 * @method string              getTags()        Returns the current record's "tags" value
 * @method timestamp           getStartsAt()    Returns the current record's "starts_at" value
 * @method timestamp           getEndsAt()      Returns the current record's "ends_at" value
 * @method timestamp           getCreatedAt()   Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()   Returns the current record's "updated_at" value
 * @method integer             getAddressId()   Returns the current record's "address_id" value
 * @method Address             getAddress()     Returns the current record's "Address" value
 * @method Cal                 getCal()         Returns the current record's "Cal" value
 * @method Doctrine_Collection getEventStat()   Returns the current record's "EventStat" collection
 * @method Doctrine_Collection getIntel()       Returns the current record's "Intel" collection
 * @method Doctrine_Collection getInvitation()  Returns the current record's "Invitation" collection
 * @method Doctrine_Collection getShortUrl()    Returns the current record's "ShortUrl" collection
 * @method Event               setId()          Sets the current record's "id" value
 * @method Event               setCalId()       Sets the current record's "cal_id" value
 * @method Event               setName()        Sets the current record's "name" value
 * @method Event               setDescription() Sets the current record's "description" value
 * @method Event               setImagePath()   Sets the current record's "image_path" value
 * @method Event               setLocation()    Sets the current record's "location" value
 * @method Event               setTz()          Sets the current record's "tz" value
 * @method Event               setTags()        Sets the current record's "tags" value
 * @method Event               setStartsAt()    Sets the current record's "starts_at" value
 * @method Event               setEndsAt()      Sets the current record's "ends_at" value
 * @method Event               setCreatedAt()   Sets the current record's "created_at" value
 * @method Event               setUpdatedAt()   Sets the current record's "updated_at" value
 * @method Event               setAddressId()   Sets the current record's "address_id" value
 * @method Event               setAddress()     Sets the current record's "Address" value
 * @method Event               setCal()         Sets the current record's "Cal" value
 * @method Event               setEventStat()   Sets the current record's "EventStat" collection
 * @method Event               setIntel()       Sets the current record's "Intel" collection
 * @method Event               setInvitation()  Sets the current record's "Invitation" collection
 * @method Event               setShortUrl()    Sets the current record's "ShortUrl" collection
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('cal_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('image_path', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('location', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('tz', 'string', 80, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 80,
             ));
        $this->hasColumn('tags', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('starts_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ends_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('address_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Address', array(
             'local' => 'address_id',
             'foreign' => 'id'));

        $this->hasOne('Cal', array(
             'local' => 'cal_id',
             'foreign' => 'id'));

        $this->hasMany('EventStat', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Intel', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('ShortUrl', array(
             'local' => 'id',
             'foreign' => 'event_id'));
    }
}