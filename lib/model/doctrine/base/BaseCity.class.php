<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('City', 'doctrine');

/**
 * BaseCity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $country_id
 * @property integer $state_id
 * @property string $name
 * @property string $nameascii
 * @property integer $by_user_id
 * @property timestamp $approved_at
 * @property float $latitude
 * @property float $longitude
 * @property integer $zoom
 * @property Country $Country
 * @property State $State
 * @property User $User
 * 
 * @method integer   getId()          Returns the current record's "id" value
 * @method integer   getCountryId()   Returns the current record's "country_id" value
 * @method integer   getStateId()     Returns the current record's "state_id" value
 * @method string    getName()        Returns the current record's "name" value
 * @method string    getNameascii()   Returns the current record's "nameascii" value
 * @method integer   getByUserId()    Returns the current record's "by_user_id" value
 * @method timestamp getApprovedAt()  Returns the current record's "approved_at" value
 * @method float     getLatitude()    Returns the current record's "latitude" value
 * @method float     getLongitude()   Returns the current record's "longitude" value
 * @method integer   getZoom()        Returns the current record's "zoom" value
 * @method Country   getCountry()     Returns the current record's "Country" value
 * @method State     getState()       Returns the current record's "State" value
 * @method User      getUser()        Returns the current record's "User" value
 * @method City      setId()          Sets the current record's "id" value
 * @method City      setCountryId()   Sets the current record's "country_id" value
 * @method City      setStateId()     Sets the current record's "state_id" value
 * @method City      setName()        Sets the current record's "name" value
 * @method City      setNameascii()   Sets the current record's "nameascii" value
 * @method City      setByUserId()    Sets the current record's "by_user_id" value
 * @method City      setApprovedAt()  Sets the current record's "approved_at" value
 * @method City      setLatitude()    Sets the current record's "latitude" value
 * @method City      setLongitude()   Sets the current record's "longitude" value
 * @method City      setZoom()        Sets the current record's "zoom" value
 * @method City      setCountry()     Sets the current record's "Country" value
 * @method City      setState()       Sets the current record's "State" value
 * @method City      setUser()        Sets the current record's "User" value
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('city');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('country_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('state_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('nameascii', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('by_user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('approved_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('latitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('longitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('zoom', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id'));

        $this->hasOne('State', array(
             'local' => 'state_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'by_user_id',
             'foreign' => 'id'));
    }
}