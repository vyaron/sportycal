<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Location', 'doctrine');

/**
 * BaseLocation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $name_ascii
 * @property string $city
 * @property string $state
 * @property string $country
 * @property float $latitude
 * @property float $longitude
 * @property integer $type_id
 * @property integer $fips_code
 * @property integer $priority
 * @property string $timezone_id
 * @property Doctrine_Collection $Address
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getNameAscii()   Returns the current record's "name_ascii" value
 * @method string              getCity()        Returns the current record's "city" value
 * @method string              getState()       Returns the current record's "state" value
 * @method string              getCountry()     Returns the current record's "country" value
 * @method float               getLatitude()    Returns the current record's "latitude" value
 * @method float               getLongitude()   Returns the current record's "longitude" value
 * @method integer             getTypeId()      Returns the current record's "type_id" value
 * @method integer             getFipsCode()    Returns the current record's "fips_code" value
 * @method integer             getPriority()    Returns the current record's "priority" value
 * @method string              getTimezoneId()  Returns the current record's "timezone_id" value
 * @method Doctrine_Collection getAddress()     Returns the current record's "Address" collection
 * @method Location            setId()          Sets the current record's "id" value
 * @method Location            setName()        Sets the current record's "name" value
 * @method Location            setNameAscii()   Sets the current record's "name_ascii" value
 * @method Location            setCity()        Sets the current record's "city" value
 * @method Location            setState()       Sets the current record's "state" value
 * @method Location            setCountry()     Sets the current record's "country" value
 * @method Location            setLatitude()    Sets the current record's "latitude" value
 * @method Location            setLongitude()   Sets the current record's "longitude" value
 * @method Location            setTypeId()      Sets the current record's "type_id" value
 * @method Location            setFipsCode()    Sets the current record's "fips_code" value
 * @method Location            setPriority()    Sets the current record's "priority" value
 * @method Location            setTimezoneId()  Sets the current record's "timezone_id" value
 * @method Location            setAddress()     Sets the current record's "Address" collection
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLocation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('location');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('name_ascii', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('city', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('state', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('country', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('latitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('longitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('type_id', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('fips_code', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('priority', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('timezone_id', 'string', 5, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 5,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Address', array(
             'local' => 'id',
             'foreign' => 'location_id'));
    }
}