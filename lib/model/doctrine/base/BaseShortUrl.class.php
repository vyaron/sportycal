<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ShortUrl', 'doctrine');

/**
 * BaseShortUrl
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $cal_id
 * @property integer $category_id
 * @property integer $event_id
 * @property integer $user_id
 * @property integer $partner_id
 * @property string $url
 * @property string $hash
 * @property string $label
 * @property string $comment
 * @property timestamp $created_at
 * @property timestamp $used_at
 * @property integer $count_used
 * @property Cal $Cal
 * @property Category $Category
 * @property Event $Event
 * @property Partner $Partner
 * @property User $User
 * 
 * @method integer   getId()          Returns the current record's "id" value
 * @method integer   getCalId()       Returns the current record's "cal_id" value
 * @method integer   getCategoryId()  Returns the current record's "category_id" value
 * @method integer   getEventId()     Returns the current record's "event_id" value
 * @method integer   getUserId()      Returns the current record's "user_id" value
 * @method integer   getPartnerId()   Returns the current record's "partner_id" value
 * @method string    getUrl()         Returns the current record's "url" value
 * @method string    getHash()        Returns the current record's "hash" value
 * @method string    getLabel()       Returns the current record's "label" value
 * @method string    getComment()     Returns the current record's "comment" value
 * @method timestamp getCreatedAt()   Returns the current record's "created_at" value
 * @method timestamp getUsedAt()      Returns the current record's "used_at" value
 * @method integer   getCountUsed()   Returns the current record's "count_used" value
 * @method Cal       getCal()         Returns the current record's "Cal" value
 * @method Category  getCategory()    Returns the current record's "Category" value
 * @method Event     getEvent()       Returns the current record's "Event" value
 * @method Partner   getPartner()     Returns the current record's "Partner" value
 * @method User      getUser()        Returns the current record's "User" value
 * @method ShortUrl  setId()          Sets the current record's "id" value
 * @method ShortUrl  setCalId()       Sets the current record's "cal_id" value
 * @method ShortUrl  setCategoryId()  Sets the current record's "category_id" value
 * @method ShortUrl  setEventId()     Sets the current record's "event_id" value
 * @method ShortUrl  setUserId()      Sets the current record's "user_id" value
 * @method ShortUrl  setPartnerId()   Sets the current record's "partner_id" value
 * @method ShortUrl  setUrl()         Sets the current record's "url" value
 * @method ShortUrl  setHash()        Sets the current record's "hash" value
 * @method ShortUrl  setLabel()       Sets the current record's "label" value
 * @method ShortUrl  setComment()     Sets the current record's "comment" value
 * @method ShortUrl  setCreatedAt()   Sets the current record's "created_at" value
 * @method ShortUrl  setUsedAt()      Sets the current record's "used_at" value
 * @method ShortUrl  setCountUsed()   Sets the current record's "count_used" value
 * @method ShortUrl  setCal()         Sets the current record's "Cal" value
 * @method ShortUrl  setCategory()    Sets the current record's "Category" value
 * @method ShortUrl  setEvent()       Sets the current record's "Event" value
 * @method ShortUrl  setPartner()     Sets the current record's "Partner" value
 * @method ShortUrl  setUser()        Sets the current record's "User" value
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseShortUrl extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('short_url');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('cal_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('category_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('event_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('partner_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('url', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('hash', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('label', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('comment', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('used_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('count_used', 'integer', 3, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 3,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Cal', array(
             'local' => 'cal_id',
             'foreign' => 'id'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Event', array(
             'local' => 'event_id',
             'foreign' => 'id'));

        $this->hasOne('Partner', array(
             'local' => 'partner_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}