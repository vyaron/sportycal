<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Cal', 'doctrine');

/**
 * BaseCal
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $by_user_id
 * @property integer $category_id
 * @property string $name
 * @property string $primary_slogan
 * @property string $description
 * @property string $location
 * @property string $image_path
 * @property string $access_key
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property string $category_ids_path
 * @property timestamp $deleted_at
 * @property integer $rate
 * @property integer $partner_id
 * @property integer $is_public
 * @property Partner $Partner
 * @property Category $Category
 * @property User $User
 * @property Doctrine_Collection $CalRequest
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $Intel
 * @property Doctrine_Collection $Invitation
 * @property Doctrine_Collection $PartnerDesc
 * @property Doctrine_Collection $ShortUrl
 * @property Doctrine_Collection $UserCal
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method integer             getByUserId()          Returns the current record's "by_user_id" value
 * @method integer             getCategoryId()        Returns the current record's "category_id" value
 * @method string              getName()              Returns the current record's "name" value
 * @method string              getPrimarySlogan()     Returns the current record's "primary_slogan" value
 * @method string              getDescription()       Returns the current record's "description" value
 * @method string              getLocation()          Returns the current record's "location" value
 * @method string              getImagePath()         Returns the current record's "image_path" value
 * @method string              getAccessKey()         Returns the current record's "access_key" value
 * @method timestamp           getCreatedAt()         Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()         Returns the current record's "updated_at" value
 * @method string              getCategoryIdsPath()   Returns the current record's "category_ids_path" value
 * @method timestamp           getDeletedAt()         Returns the current record's "deleted_at" value
 * @method integer             getRate()              Returns the current record's "rate" value
 * @method integer             getPartnerId()         Returns the current record's "partner_id" value
 * @method integer             getIsPublic()          Returns the current record's "is_public" value
 * @method Partner             getPartner()           Returns the current record's "Partner" value
 * @method Category            getCategory()          Returns the current record's "Category" value
 * @method User                getUser()              Returns the current record's "User" value
 * @method Doctrine_Collection getCalRequest()        Returns the current record's "CalRequest" collection
 * @method Doctrine_Collection getEvent()             Returns the current record's "Event" collection
 * @method Doctrine_Collection getIntel()             Returns the current record's "Intel" collection
 * @method Doctrine_Collection getInvitation()        Returns the current record's "Invitation" collection
 * @method Doctrine_Collection getPartnerDesc()       Returns the current record's "PartnerDesc" collection
 * @method Doctrine_Collection getShortUrl()          Returns the current record's "ShortUrl" collection
 * @method Doctrine_Collection getUserCal()           Returns the current record's "UserCal" collection
 * @method Cal                 setId()                Sets the current record's "id" value
 * @method Cal                 setByUserId()          Sets the current record's "by_user_id" value
 * @method Cal                 setCategoryId()        Sets the current record's "category_id" value
 * @method Cal                 setName()              Sets the current record's "name" value
 * @method Cal                 setPrimarySlogan()     Sets the current record's "primary_slogan" value
 * @method Cal                 setDescription()       Sets the current record's "description" value
 * @method Cal                 setLocation()          Sets the current record's "location" value
 * @method Cal                 setImagePath()         Sets the current record's "image_path" value
 * @method Cal                 setAccessKey()         Sets the current record's "access_key" value
 * @method Cal                 setCreatedAt()         Sets the current record's "created_at" value
 * @method Cal                 setUpdatedAt()         Sets the current record's "updated_at" value
 * @method Cal                 setCategoryIdsPath()   Sets the current record's "category_ids_path" value
 * @method Cal                 setDeletedAt()         Sets the current record's "deleted_at" value
 * @method Cal                 setRate()              Sets the current record's "rate" value
 * @method Cal                 setPartnerId()         Sets the current record's "partner_id" value
 * @method Cal                 setIsPublic()          Sets the current record's "is_public" value
 * @method Cal                 setPartner()           Sets the current record's "Partner" value
 * @method Cal                 setCategory()          Sets the current record's "Category" value
 * @method Cal                 setUser()              Sets the current record's "User" value
 * @method Cal                 setCalRequest()        Sets the current record's "CalRequest" collection
 * @method Cal                 setEvent()             Sets the current record's "Event" collection
 * @method Cal                 setIntel()             Sets the current record's "Intel" collection
 * @method Cal                 setInvitation()        Sets the current record's "Invitation" collection
 * @method Cal                 setPartnerDesc()       Sets the current record's "PartnerDesc" collection
 * @method Cal                 setShortUrl()          Sets the current record's "ShortUrl" collection
 * @method Cal                 setUserCal()           Sets the current record's "UserCal" collection
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCal extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cal');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('by_user_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('category_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('primary_slogan', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('location', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('image_path', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('access_key', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('category_ids_path', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('deleted_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('rate', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('partner_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('is_public', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Partner', array(
             'local' => 'partner_id',
             'foreign' => 'id'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'by_user_id',
             'foreign' => 'id'));

        $this->hasMany('CalRequest', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('Intel', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('Invitation', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('PartnerDesc', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('ShortUrl', array(
             'local' => 'id',
             'foreign' => 'cal_id'));

        $this->hasMany('UserCal', array(
             'local' => 'id',
             'foreign' => 'cal_id'));
    }
}