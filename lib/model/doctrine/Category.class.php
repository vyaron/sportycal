<?php

/**
 * Category
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    evento
 * @subpackage model
 * @author     Yaron Biton
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Category extends BaseCategory
{
	const CTG_NEVER_MISS = 7777;
	const CTG_BIRTHDAY = 2200;
	
    private $rootCategory = null;
    private $ctgsPath = null;
    private $parentCategory = null;
    
    function getRootCategoryId() {
    	$ctgIdsPath = $this->getCategoryIdsPath();
        $ctgIds = explode(",", $ctgIdsPath);
    	return $ctgIds[0];
    }
    
    function getRootCategory() {
    	$id = $this->getId();
    	$rootCtgId = $this->getRootCategoryId();
    	
    	if ($id == $rootCtgId) return $this;
    	
    	// basic cache
        if ($this->rootCategory) return $this->rootCategory;
        $this->rootCategory = Doctrine::getTable('Category')->find($rootCtgId);
        
        /*
        
        $done = false;
        $category = $this;
        
        while (!$done) {
            $ctgId = $category->getParentId();
            if (!$ctgId) {
                $this->rootCategory = $category;
                $done = true;
                continue;
            }
            $category = Doctrine::getTable('Category')->find(array($ctgId));
        }
        */
        return $this->rootCategory;
    }

    function getCategoryPath() {
    	
    	// basic cache
        if ($this->ctgsPath) return $this->ctgsPath;
    	
    	$ctgIdsPath = $this->getCategoryIdsPath();
        $ctgIds = explode(",", $ctgIdsPath);
        $this->ctgsPath = Doctrine::getTable('Category')->getByIds($ctgIds);
        /*
        if (is_array($this->ctgsPath))
        	array_reverse($this->ctgsPath);
        */
        
		return $this->ctgsPath;    	
    }

    public static function getAsKeywords($ctg, $subCtgs) {
    	//Utils::pp($ctg->getCategoryPathAsKeywords());
    	
    	$keywords = '';
    	if ($ctg) $keywords = $ctg->getCategoryPathAsKeywords();
    	
    	
    	foreach ($subCtgs as $ctg) {
    		$keywords .= $ctg->getName() . ",";
    	}
    	$keywords = substr($keywords, 0, -1);
    	
    	return $keywords;
    }
    
    
    protected function getCategoryPathAsKeywords() {
    	//Utils::pp("ss");
    	$ctgs = $this->getCategoryPath()->getData();
    	$ctgs = array_reverse($ctgs);
    	$keywords = ''; 
    	foreach ($ctgs as $ctg) {
    		$keywords .= $ctg->getName() . ",";
    		$keywords .= $ctg->getName() . " Calendar,";
    		//$keywords .= $ctg->getName() . " Schedule,";
    		//$keywords .= $ctg->getName() . " Calendars,";
    		//$keywords .= $ctg->getName() . " Schedules,";
    	}
    	//$keywords = substr($keywords, 0, -1);
    	
    	return $keywords;
    }
    
    /*
    
    function getCategoryPath() {
        
        $done = false;
        $category = $this;
        
        $result = array();
        
        while (!$done) {
            $result[] = $category;
            
            $ctgId = $category->getParentId();
            if (!$ctgId) {
                $this->rootCategory = $category;
                $done = true;
                continue;
            }
            $category = Doctrine::getTable('Category')->find(array($ctgId));
        }
        
        $result = array_reverse($result);
        return $result;
    }
*/

    function getCategoryPathAsText() {
        $ctgPath = $this->getCategoryPath();
        $result = '';
        foreach ($ctgPath as $ctg) {
            $result .= $ctg->getName()  . " / ";
        }
        
        $result = substr($result, 0, -3);
        return $result;
    }
    
    
    function getCategoryPathAsNavigationForSearch() {
        $ctgPath = $this->getCategoryPath();
        $result = '';
        foreach ($ctgPath as $ctg) {
            $result .= '<a href="' . url_for($ctg->getUrl(ESC_RAW)) .'">'. $ctg->getName() . '</a> > ';
        }
        
        $result = substr($result, 0, strlen($result)-2);
        return $result;
    }

    private $numCtgs;
    function getCategoryPathAsNavigation($lastAsLink=false) {
		
        $ctgPath    = $this->getCategoryPath();
        //$imgNavSep  = "<img src='/images/layout/navSep.gif' />";

        $result = '';
		
        if (!UserUtils::getPartner()) $result .= '<a href="/main/index" class="navSep">'. __('Home') . '</a> ';
        //$result .= $imgNavSep;
        
        $numCtgs = 0;
        $ctgPathCount = count($ctgPath);
        for ($i=0; $i<$ctgPathCount; $i++) {
            $ctg = $ctgPath[$i];
            
            if (!$lastAsLink && $i == $ctgPathCount-1) {
                $result .= '&nbsp;'. $ctg->getName();
            } else {
                $result .= '&nbsp;<a href="' . url_for($ctg->getUrl(ESC_RAW)) .'" class="navSep">'. $ctg->getName() . '</a> ';
                //$result .= $imgNavSep;
            }
            
            $numCtgs++;
        }

        // we cache that for use in getImagePathSub
        $this->numCtgs = $numCtgs;        
        return $result;
    }


    function getImagePathSub($specific = null) {
        $imgPath = $this->getRootCategory()->getImagePath();
        $odd = "1";
        
        if ($specific) $odd = $specific;
        else {
	        if ($this->numCtgs % 2 == 0) {
	            $odd = "2";
	        }
        }
                
        $pos = strrpos($imgPath, ".");
        $imgPath = substr($imgPath, 0, $pos-1) . "_sub$odd" . substr($imgPath, $pos);
        return $imgPath;
    }

    public function doCalculateCalsCount($ctgIds) {
        
        $category = $this;
        $result = 0;
        
        $ctgId = $category->getId();

		// Temporary solution for Toto-Winner (2 places)
    	$showPastCals = true;
    	if ($ctgId == 2100) $showPastCals = false;
    	$cals         = CalTable::getCals($ctgId, null, null, $showPastCals);
        
        foreach($cals as $cal) {
            $cal->setCategoryIdsPath(implode(",", $ctgIds));
            $cal->save();
        }
        
        $result += count($cals);
        

        $subCtgs = CategoryTable::getCategories($ctgId);
        foreach($subCtgs as $subCtg) {
            $tmpCtgIds = $ctgIds;
            $tmpCtgIds[] = $subCtg->getId();
            $result += $subCtg->doCalculateCalsCount($tmpCtgIds);
        }

        $this->setCalsCount($result);
        $this->setCategoryIdsPath(implode(",", $ctgIds));
        $this->save();

        return $result;
    }

    function getImagePathForPdf() {
        $imgPath = $this->getImagePath();
        $imgPath = str_replace('/images/', '/images/pdf/', $imgPath);
        //$imgPath = str_replace('.png', '.gif', $imgPath);
        return $imgPath;
    }

    
    
	public function toJSON() {
		$imgUrl				= sfConfig::get('app_domain_full') . "/" . $this->getImagePathSub('1');		
		$strJson = '{';
		$strJson .= ' "id": '.$this->getId();
		$strJson .= ',"name": "'.$this->getName().'"';		
		$strJson .= ',"imgUrl": "'.$imgUrl.'"';		
		$strJson .= ',"calsCount": '.$this->getCalsCount();		
		$strJson .= '}';
		return $strJson;
		
	}
	
	public static function makeJSON($ctgs) {
		$strJson = '[ ';
		foreach ($ctgs as $ctg) {
			$strJson .= $ctg->toJSON() . ",";	
		}
		$strJson = substr($strJson, 0, -1);
		$strJson .= ']';
		return $strJson;
	}
    
	public function getLinks() {
        $links = '';
        
        $ctgIdsPath = $this->getCategoryIdsPath();

        if ($ctgIdsPath) {
            $ctgIds     = explode(",", $ctgIdsPath);
            $ctgs       = Doctrine::getTable('Category')->getByIds($ctgIds);
            $mapCtgs    = GeneralUtils::mapById($ctgs);
            $links      = Doctrine::getTable('CategoryLink')->getByCategoryIds(array_keys($mapCtgs));
        }        
        
        return $links;
    }
	
 	public function getAggregatedCal() {
 		$aggCal = Cal::getAggregatedCal($this);
 		//Utils::pa($aggCal->getEvents());
 		return $aggCal;	
 	}   
	
 	function getParentCategory() {
    	// basic cache
        if ($this->parentCategory) return $this->parentCategory;
        
       	$parentCategoryId = $this->getParentId();
       	if ($parentCategoryId) $this->parentCategory = Doctrine::getTable('Category')->find($parentCategoryId);
       
        return  $this->parentCategory;
    }

    public static function getBirthdayCategory($user) {
    	$ctg = new Category();
    	if ($user) $ctg->setName($user->getFullName() . " - Friends Birthday");
    	//$ctg->setImagePath("cals.png");
    	$ctg->setCategoryIdsPath(self::CTG_BIRTHDAY);
    	
    	return $ctg;
    }
    
	public function getUrl() {
		return '@category_name?id=' . $this->getId() . '&name=' . Utils::slugify($this->getName() . '-calendars');
	}
    
	public function logicDelete(){
		//delete current ctg
		$dateNow = date("Y-m-d H:i:s");
		$this->setDeletedAt($dateNow);
    	$this->save();

    	
    	//delete curr ctg cals
		$cals = CalTable::getCals($this->getId());
		foreach ($cals as $cal){
			$cal->setDeletedAt($dateNow);
    		$cal->save();
		}
		
		//delete sub ctgs and sub ctg cals
		$subCtgs = CategoryTable::getCategories($this->getId());
		foreach ($subCtgs as $subCtg){
			$subCtg->logicDelete();
		}
	}
	
	public function logicRevive(){
		//revive current ctg
		$this->setDeletedAt(NULL);
    	$this->save();
	}
	
	public function getFlatObj($min = false){
		$res = new stdClass();
		
		$res->id = $this->getId();
		$res->name = $this->getName();
		$res->cals_count = $this->getCalsCount();
		if (!$res->cals_count) $res->cals_count = 0;
		
		if (!$min){
			$res->rate = $this->getRate();
			$res->img_url = sfConfig::get('app_domain_full') . $this->getImagePath();
		}
		
		return $res;
	}
	
	/*
	// Does not support checking under ROOT Categories yet
	public static function isCtgUnderSubCtgs($ctgsIdsPath, $ctgId) {
 		// shortcut when does not exist at all
 		if (strpos($ctgsIdsPath, ",$ctgId") === false) return false;
 		// exists in the middle
 		if (strpos($ctgsIdsPath, ",$ctgId,") > 0) return true;
 		// exists in the end
		if (strpos($ctgsIdsPath, ",$ctgId") + strlen(",$ctgId") === strlen($ctgsIdsPath) ) return true;

		return false; 		
		
	}*/
}